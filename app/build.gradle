apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'

def customEndpoint = System.getenv("CUSTOM_ENDPOINT")

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId "com.touchin.template"
        minSdkVersion 21
        targetSdkVersion versions.compileSdk
        versionCode System.getenv("BUILD_NUMBER") as Integer ?: 10000
        versionName "1.0." + versionCode

        rootProject.extensions.pathToApiSchemes = "$rootDir/Template-common/api"
        rootProject.extensions.applicationId = "com.touchin.template"

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    firebaseCrashlytics {
        mappingFileUploadEnabled true
    }

    signingConfigs {
        release {
            storeFile file("keystore/touchin.jks")
            storePassword "iphoneandroidwp7"
            keyAlias "touchin"
            keyPassword "iphoneandroidwp7"
        }
    }

    buildTypes {
        debug {
            versionNameSuffix ".debug"
            minifyEnabled false
            shrinkResources false
            ext.enableCrashlytics = false
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            shrinkResources true
            ext.enableCrashlytics = true
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "proguardSettings", "apiEndpoint", "sslPinning", "testPanel"

    /*
        Use that guide for adding new server env. flavours https://github.com/TouchInstinct/Styleguide/blob/master/general/setupBuildGuide.md
    */
    productFlavors {
        noObfuscate {
            dimension "proguardSettings"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$buildScriptsDir/proguard/noObfuscate.pro"
        }
        obfuscate {
            dimension "proguardSettings"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$buildScriptsDir/proguard/obfuscate.pro"
        }
        touchinTest {
            def endpoint = customEndpoint ?: 'https://template-server.test.touchin.ru'
            dimension "apiEndpoint"
            buildConfigField "String", "API_URL", """\"${endpoint}/\""""
        }
        customerProd {
            def endpoint = customEndpoint ?: 'https://template-server.prod.customer.ru'
            dimension "apiEndpoint"
            buildConfigField "String", "API_URL", """\"${endpoint}/\""""
        }
        withSSLPinning {
            dimension "sslPinning"
            buildConfigField "Boolean", "PIN_SSL", 'true'
        }
        withoutSSLPinning {
            dimension "sslPinning"
            buildConfigField "Boolean", "PIN_SSL", 'false'
        }
        withTestPanel {
            dimension "testPanel"
        }
        withoutTestPanel {
            dimension "testPanel"
        }
    }

    extensions.languageMap = ["ru": "Template-common/strings/default_common_strings_ru.json"]

}

androidExtensions {
    experimental = true
}

dependencies {

    // RoboSwag
    gradle.ext.roboswag.forEach { module ->
        implementation project(":$module")
    }

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // AndroidX
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.recyclerview:recyclerview:$versions.androidx"
    implementation "androidx.cardview:cardview:$versions.androidx"
    implementation "androidx.gridlayout:gridlayout:$versions.androidx"
    implementation "androidx.core:core-ktx:$versions.androidxKtx"
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-beta4"
    implementation "com.google.android.material:material:$versions.material"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$versions.lifecycle"

    // Room
    implementation "androidx.room:room-runtime:$versions.room"
    implementation "androidx.room:room-rxjava2:$versions.room"
    kapt "androidx.room:room-compiler:$versions.room"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp3"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$versions.okhttp3"

    // Logan square
    implementation "ru.touchin:logansquare:$versions.logansquare"
    kapt "ru.touchin:logansquare-compiler:$versions.logansquare"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"

    // Glide
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"

    // Chucker
    withTestPanelImplementation "com.github.ChuckerTeam.Chucker:library:$versions.chucker"
    withoutTestPanelImplementation "com.github.ChuckerTeam.Chucker:library-no-op:$versions.chucker"

    // LeakCanary
    withTestPanelImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakcanary"

}
//TODO: uncomment, when common repo become plugged

//gradle.projectsEvaluated {
//    preBuild.dependsOn('stringGenerator')
//}

//apply from: "$buildScriptsDir/gradle/stringGenerator.gradle"
apply from: "$buildScriptsDir/gradle/apiGenerator.gradle"
apply from: "$buildScriptsDir/gradle/applicationFileNaming.gradle"